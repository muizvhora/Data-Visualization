##### Based on Data Visualization Tutorials by Sentdex #####
import matplotlib.pyplot as plt
from pandas_datareader import data, wb
import matplotlib.dates as mdates

import matplotlib.ticker as mticker
import matplotlib.finance as fin
from matplotlib import style
import pandas as pd
import numpy as np
import time
import datetime
from datetime import datetime

# import matplotlib.dates as mdates
style.use('fivethirtyeight')

MA1 = 10
MA2 = 30

def moving_avg(values, ma):
    
    fraction = np.repeat(1.0, ma)/ma
    return np.convolve(values, fraction, 'valid')

def read_stock_data(stock):
    
    fig = plt.figure(figsize=(10,10), dpi = 100)
    ax1 = plt.subplot2grid((10,1), (0,0), rowspan= 3, colspan= 1)
    plt.title('Stock Prices')
    ax2 = plt.subplot2grid((10,1), (3,0), rowspan= 4, colspan= 1, sharex = ax1)
    ax2_v = ax2.twinx()
    ax3 = plt.subplot2grid((10,1), (7,0), rowspan= 3, colspan= 1, sharex = ax1)
    
    start = datetime(2017,1,1)
    end   = datetime.fromtimestamp(time.time())
    df = data.DataReader(stock, 'yahoo', start, end)
    df.reset_index(inplace = True)

    #Subplot - 1 #### HIGH - lOW
    df['High_Low'] = df.High - df.Low
    ax1.plot(df.Date.iloc[max(MA1, MA2)-1:], df['High_Low'].iloc[max(MA1, MA2)-1:], color = 'c', linewidth=1, label = 'High - Low')
    plt.setp(ax1.get_xticklabels(), visible = False)
    ax1.yaxis.set_ticks([0,5,10,15])
    ax1.xaxis.set_major_locator(mticker.MaxNLocator(nbins = 'auto', prune = 'lower'))

    ax1.legend()
    
    #Subplot - 2 ##### Candlestick - OHLC
    ohlc = []
    data_copy = df.copy()
    data_copy['Date_Ordinal'] = data_copy.Date.apply(lambda x: datetime.toordinal(x))
    labels_required = ['Date_Ordinal', 'Open', 'High', 'Low', 'Close', 'Volume']
    data_copy = data_copy[labels_required]
    ax2.plot([],[],label = 'OHLC Graph', linewidth = 1)
    
    for i in range(len(data_copy)):
        ohlc.append(data_copy.iloc[i])
    fin.candlestick_ohlc(ax2, ohlc[max(MA1, MA2)-1:], colorup= 'g', colordown= 'r', width= 0.6, alpha= 0.6)
    plt.setp(ax2.get_xticklabels(), visible = False)
    ax2.yaxis.set_major_locator(mticker.MaxNLocator(nbins = 5, prune = 'upper'))
    
    ax2_v.fill_between(data_copy.Date_Ordinal.iloc[max(MA1, MA2)-1:], 0, data_copy.Volume.iloc[max(MA1, MA2)-1:],
                      facecolor = 'c', alpha = 0.25)
    ax2_v.axes.yaxis.set_ticklabels(())
    
    ax2_v.axes.set_ylim(0,2*max(data_copy.Volume))
    ax2_v.grid(False)
    ax2.legend()
    #Subplot - 3 ##### Moving Averages
    
    sma_open_1 = moving_avg(data_copy.Open, MA1)
    sma_open_2 = moving_avg(data_copy.Open, MA2)
    ax3.plot(data_copy.Date_Ordinal.iloc[max(MA1, MA2)-1:],sma_open_1[MA2-MA1:], linewidth=1, label = 'Fast MA for ' + str(MA1) + ' days - Open', markersize = 10)
    ax3.plot(data_copy.Date_Ordinal.iloc[max(MA1, MA2)-1:],sma_open_2, linewidth= 1, label = 'Slow MA for ' + str(MA2) + ' days - Open', markersize = 10)
    
    ax3.fill_between(data_copy.Date_Ordinal.iloc[max(MA1, MA2)-1:],sma_open_1[MA2-MA1:],sma_open_2,
                    where =sma_open_1[MA2-MA1:] > sma_open_2,
                    facecolor = 'g', alpha = 0.5)
    ax3.fill_between(data_copy.Date_Ordinal.iloc[max(MA1, MA2)-1:],sma_open_1[MA2-MA1:],sma_open_2,
                    where =sma_open_1[MA2-MA1:] < sma_open_2,
                    facecolor = 'r', alpha = 0.5)
    plt.setp(ax3.get_xticklabels(), rotation = 45)
#     plt.setp(ax1.legend(), fontsize = 10)
    
    plt.legend()
    plt.show()
    

read_stock_data('AAPL')  
